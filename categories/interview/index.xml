<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>interview on Even - A super concise theme for Hugo</title>
    <link>http://localhost:1313/categories/interview/</link>
    <description>Recent content in interview on Even - A super concise theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 31 Mar 2016 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/categories/interview/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2016-03-31-EPAM-Scala-Interview-Questions</title>
      <link>http://localhost:1313/post/blog_2016/epam-scala-interview-questions/</link>
      <pubDate>Thu, 31 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/blog_2016/epam-scala-interview-questions/</guid>
      <description>Scala Interview Questions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  1. pattern matching and functional composition https://twitter.github.io/scala_school/pattern-matching-and-functional-composition.html  scala compose partial functions scala&amp;gt; val fComposeG = f _ compose g _ fComposeG: (String) =&amp;gt; java.lang.String = &amp;lt;function&amp;gt; scala&amp;gt; fComposeG(&amp;#34;yay&amp;#34;) res0: java.lang.String = f(g(yay)) andThen andThen is like compose, but calls the first function and then the second, g(f(x)) scala&amp;gt; val fAndThenG = f _ andThen g _ fAndThenG: (String) =&amp;gt; java.</description>
    </item>
    
  </channel>
</rss>
